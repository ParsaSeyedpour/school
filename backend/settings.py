"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-!9+-3)k%t5!@3as+%l+8(714-#@p5h=z%n#x!wpkm-zv(4j(e9"


#کلید رمزنگاری اصلی جنگو (برای امضا/هش کوکی‌ها، CSRF، session و…).


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


#فهرست دامنه‌ها/آی‌پی‌هایی که سرور اجازه پاسخ‌گویی به آن‌ها را دارد.



# Application definition


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "rest_framework",
    "drf_spectacular",

    "accounts",
    "students",
    "teachers",
    "parents",
    "classes",
]



AUTH_USER_MODEL = "accounts.User"


#به جنگو می‌گوید مدل کاربر پیش‌فرض را با accounts.User جایگزین کند.


MIDDLEWARE = [
    #هدرهای امنیتی (HSTS و …)
    "django.middleware.security.SecurityMiddleware",
    #مدیریت سشن‌های سمت سرور.
    "django.contrib.sessions.middleware.SessionMiddleware",
    #بهینه‌سازی‌های عمومی (مثلاً APPEND_SLASH).
    "django.middleware.common.CommonMiddleware",
    #محافظت از CSRF در فرم‌ها/POST.
    "django.middleware.csrf.CsrfViewMiddleware",
    #اتصال کاربر احراز هویت‌شده به درخواست.
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    #سیستم پیام‌های one-time.
    "django.contrib.messages.middleware.MessageMiddleware",
    #محافظت در برابر Clickjacking
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }



import os
from dotenv import load_dotenv
load_dotenv()

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "schooldb"),
        "USER": os.getenv("POSTGRES_USER", "schooluser"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "schoolpass"),
        "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

#عدم شباهت به اطلاعات کاربر،
# حداقل طول،
#نبودن در فهرست رمزهای رایج،
#نبودن در فهرست رمزهای رایج،





# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


SPECTACULAR_SETTINGS = {
    "TITLE": "School API",
    "DESCRIPTION": "Role-based API (student/teacher/parent) with JWT auth",
    "VERSION": "1.0.0",
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

# DRF + drf-spectacular
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    # Optional: set a default permission
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "School API",
    "DESCRIPTION": "Role-based API (student/teacher/parent) with JWT auth",
    "VERSION": "1.0.0",

    # Avoid self-referencing schema (nice to have)
    "SERVE_INCLUDE_SCHEMA": False,

    # Add JWT “Authorize” button in Swagger
    "SECURITY": [{"BearerAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
}
